#!/usr/bin/env python3
"""
Download and convert IEEE OUI database to LanScan format.

Downloads the official IEEE OUI database and converts it to the format
expected by MacVendorLookup: OUI<TAB>Vendor Name

Format:
    Input (IEEE):
        28-6F-B9   (hex)		Company Name
        286FB9     (base 16)		Company Name

    Output (LanScan):
        286FB9<TAB>Company Name
"""

import urllib.request
import re
import sys

OUI_URL = "https://standards-oui.ieee.org/oui/oui.txt"
OUTPUT_FILE = "oui_database.txt"

def download_oui_database():
    """Download the IEEE OUI database."""
    print(f"Downloading IEEE OUI database from {OUI_URL}...")
    try:
        # Add user agent to avoid 418 error
        req = urllib.request.Request(
            OUI_URL,
            headers={'User-Agent': 'LanScan-OUI-Updater/1.0'}
        )
        with urllib.request.urlopen(req, timeout=60) as response:
            content = response.read().decode('utf-8', errors='ignore')
        print(f"Downloaded {len(content)} bytes")
        return content
    except Exception as e:
        print(f"Error downloading database: {e}")
        sys.exit(1)

def parse_oui_database(content):
    """Parse the IEEE OUI database and extract OUI -> Vendor mappings."""
    oui_map = {}

    # Pattern to match lines like: "28-6F-B9   (hex)		Company Name"
    # or "286FB9     (base 16)		Company Name"
    hex_pattern = re.compile(r'^([0-9A-F]{2}-[0-9A-F]{2}-[0-9A-F]{2})\s+\(hex\)\s+(.+)$')

    for line in content.split('\n'):
        line = line.strip()
        match = hex_pattern.match(line)

        if match:
            oui_hex = match.group(1).replace('-', '')  # Remove dashes
            vendor = match.group(2).strip()

            # Clean up vendor name (remove extra whitespace)
            vendor = ' '.join(vendor.split())

            oui_map[oui_hex] = vendor

    return oui_map

def save_oui_database(oui_map, output_file):
    """Save the OUI database in LanScan format."""
    print(f"Writing {len(oui_map)} entries to {output_file}...")

    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # Write header comment
            f.write("# IEEE OUI Database\n")
            f.write("# Format: OUI<TAB>Vendor Name\n")
            f.write("# Auto-generated by download_oui.py\n")
            f.write("#\n")

            # Write entries sorted by OUI
            for oui in sorted(oui_map.keys()):
                vendor = oui_map[oui]
                f.write(f"{oui}\t{vendor}\n")

        print(f"Successfully wrote {len(oui_map)} OUI entries")
        return True

    except Exception as e:
        print(f"Error writing output file: {e}")
        return False

def main():
    print("=" * 60)
    print("IEEE OUI Database Downloader for LanScan")
    print("=" * 60)
    print()

    # Download
    content = download_oui_database()

    # Parse
    print("Parsing OUI database...")
    oui_map = parse_oui_database(content)
    print(f"Found {len(oui_map)} unique OUI entries")

    # Show some examples
    print("\nExample entries:")
    count = 0
    for oui, vendor in sorted(oui_map.items()):
        if count < 5:
            print(f"  {oui} -> {vendor}")
            count += 1
        else:
            break

    # Save
    print()
    if save_oui_database(oui_map, OUTPUT_FILE):
        print()
        print(f"✓ Success! OUI database saved to: {OUTPUT_FILE}")
        print(f"  Total vendors: {len(oui_map)}")
        print()
        print("Next steps:")
        print("  1. Copy oui_database.txt to your LanScan build directory")
        print("  2. The application will load it automatically on startup")
    else:
        print("✗ Failed to save OUI database")
        sys.exit(1)

if __name__ == "__main__":
    main()
