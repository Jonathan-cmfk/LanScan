#ifndef ALERTSERVICE_H
#define ALERTSERVICE_H

#include <QObject>
#include <QList>
#include <QMap>
#include "models/Alert.h"

/**
 * @brief Service for managing network monitoring alerts
 *
 * The AlertService handles creation, storage, and management of alerts
 * generated by the monitoring system. It supports alert acknowledgment,
 * filtering, and automatic pruning of old alerts.
 */
class AlertService : public QObject {
    Q_OBJECT

public:
    /**
     * @brief Constructor
     * @param parent Parent QObject
     */
    explicit AlertService(QObject* parent = nullptr);

    /**
     * @brief Destructor
     */
    ~AlertService();

    /**
     * @brief Create and store a new alert
     * @param type Alert type
     * @param severity Alert severity
     * @param deviceId Device identifier
     * @param message Alert message
     * @return The created alert
     */
    Alert createAlert(AlertType type, AlertSeverity severity,
                     const QString& deviceId, const QString& message);

    /**
     * @brief Get all alerts
     * @return List of all alerts
     */
    QList<Alert> getAlerts() const;

    /**
     * @brief Get unacknowledged alerts only
     * @return List of unacknowledged alerts
     */
    QList<Alert> getUnacknowledgedAlerts() const;

    /**
     * @brief Get alerts for a specific device
     * @param deviceId Device identifier
     * @return List of alerts for the device
     */
    QList<Alert> getAlertsForDevice(const QString& deviceId) const;

    /**
     * @brief Get alerts by severity
     * @param severity Severity level
     * @return List of alerts with specified severity
     */
    QList<Alert> getAlertsBySeverity(AlertSeverity severity) const;

    /**
     * @brief Get alerts by type
     * @param type Alert type
     * @return List of alerts of specified type
     */
    QList<Alert> getAlertsByType(AlertType type) const;

    /**
     * @brief Get alert count
     * @return Total number of alerts
     */
    int getAlertCount() const;

    /**
     * @brief Get unacknowledged alert count
     * @return Number of unacknowledged alerts
     */
    int getUnacknowledgedCount() const;

    /**
     * @brief Acknowledge a specific alert
     * @param alertId Alert identifier
     * @return True if alert was found and acknowledged
     */
    bool acknowledgeAlert(const QString& alertId);

    /**
     * @brief Acknowledge all alerts
     */
    void acknowledgeAllAlerts();

    /**
     * @brief Clear all alerts
     */
    void clearAlerts();

    /**
     * @brief Clear alerts for a specific device
     * @param deviceId Device identifier
     */
    void clearAlertsForDevice(const QString& deviceId);

    /**
     * @brief Set maximum number of alerts to keep
     * @param maxAlerts Maximum alert count
     */
    void setMaxAlerts(int maxAlerts);

    /**
     * @brief Get maximum number of alerts
     * @return Maximum alert count
     */
    int getMaxAlerts() const;

    /**
     * @brief Manually trigger alert pruning
     */
    void pruneOldAlerts();

signals:
    /**
     * @brief Emitted when a new alert is created
     * @param alert The created alert
     */
    void alertCreated(const Alert& alert);

    /**
     * @brief Emitted when an alert is acknowledged
     * @param alertId The acknowledged alert ID
     */
    void alertAcknowledged(const QString& alertId);

    /**
     * @brief Emitted when all alerts are acknowledged
     */
    void allAlertsAcknowledged();

    /**
     * @brief Emitted when alerts are cleared
     */
    void alertsCleared();

    /**
     * @brief Emitted when alert count changes
     * @param total Total alert count
     * @param unacknowledged Unacknowledged alert count
     */
    void alertCountChanged(int total, int unacknowledged);

private:
    QList<Alert> m_alerts;           // All alerts
    int m_maxAlerts;                 // Maximum alerts to keep
    QMap<QString, int> m_deviceAlertCount;  // Alert count per device

    /**
     * @brief Generate unique alert ID
     * @return Unique alert identifier
     */
    QString generateAlertId();

    /**
     * @brief Remove oldest alerts if limit exceeded
     */
    void enforceMaxAlerts();

    /**
     * @brief Update alert count for a device
     * @param deviceId Device identifier
     */
    void updateDeviceAlertCount(const QString& deviceId);

    /**
     * @brief Emit alert count changed signal
     */
    void emitAlertCountChanged();
};

#endif // ALERTSERVICE_H
