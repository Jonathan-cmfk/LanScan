#ifndef ALERT_H
#define ALERT_H

#include <QString>
#include <QDateTime>
#include <QColor>
#include <QMetaType>

/**
 * @brief Alert severity levels
 */
enum class AlertSeverity {
    Info,       // Informational alert
    Warning,    // Warning alert (potential issue)
    Critical    // Critical alert (serious issue)
};

/**
 * @brief Alert types
 */
enum class AlertType {
    HighLatency,      // High network latency detected
    PacketLoss,       // Packet loss detected
    HighJitter,       // High jitter detected
    DeviceOffline,    // Device went offline
    DeviceOnline,     // Device came online
    ThresholdExceeded // Generic threshold exceeded
};

/**
 * @brief Alert model representing a network alert/event
 *
 * Represents an alert generated by the monitoring system when
 * certain conditions or thresholds are met.
 */
class Alert {
public:
    /**
     * @brief Default constructor
     */
    Alert();

    /**
     * @brief Parameterized constructor
     * @param type Alert type
     * @param severity Alert severity
     * @param deviceId Device identifier
     * @param message Alert message
     */
    Alert(AlertType type, AlertSeverity severity,
          const QString& deviceId, const QString& message);

    /**
     * @brief Copy constructor
     */
    Alert(const Alert& other);

    /**
     * @brief Assignment operator
     */
    Alert& operator=(const Alert& other);

    /**
     * @brief Equality operator
     */
    bool operator==(const Alert& other) const;

    /**
     * @brief Inequality operator
     */
    bool operator!=(const Alert& other) const;

    // Getters
    QString id() const { return m_id; }
    AlertType type() const { return m_type; }
    AlertSeverity severity() const { return m_severity; }
    QString deviceId() const { return m_deviceId; }
    QString message() const { return m_message; }
    QDateTime timestamp() const { return m_timestamp; }
    bool isAcknowledged() const { return m_acknowledged; }

    // Setters
    void setId(const QString& id) { m_id = id; }
    void setType(AlertType type) { m_type = type; }
    void setSeverity(AlertSeverity severity) { m_severity = severity; }
    void setDeviceId(const QString& deviceId) { m_deviceId = deviceId; }
    void setMessage(const QString& message) { m_message = message; }
    void setTimestamp(const QDateTime& timestamp) { m_timestamp = timestamp; }
    void setAcknowledged(bool acknowledged) { m_acknowledged = acknowledged; }

    /**
     * @brief Get color associated with severity level
     * @return QColor for the severity
     */
    QColor getSeverityColor() const;

    /**
     * @brief Convert alert type to string
     * @return String representation of alert type
     */
    QString typeToString() const;

    /**
     * @brief Convert alert severity to string
     * @return String representation of severity
     */
    QString severityToString() const;

    /**
     * @brief Convert alert to string representation
     * @return Formatted string with all alert details
     */
    QString toString() const;

    /**
     * @brief Static helper: Convert AlertType enum to string
     */
    static QString alertTypeToString(AlertType type);

    /**
     * @brief Static helper: Convert AlertSeverity enum to string
     */
    static QString alertSeverityToString(AlertSeverity severity);

    /**
     * @brief Static helper: Get color for severity
     */
    static QColor severityColor(AlertSeverity severity);

private:
    QString m_id;                  // Unique alert identifier
    AlertType m_type;              // Alert type
    AlertSeverity m_severity;      // Severity level
    QString m_deviceId;            // Associated device ID
    QString m_message;             // Alert message
    QDateTime m_timestamp;         // When alert was created
    bool m_acknowledged;           // Whether alert has been acknowledged
};

// Register with Qt meta-object system for use in signals/slots
Q_DECLARE_METATYPE(Alert)
Q_DECLARE_METATYPE(AlertType)
Q_DECLARE_METATYPE(AlertSeverity)

#endif // ALERT_H
